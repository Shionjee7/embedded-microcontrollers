#include "mbed.h" 
#include "i2c.h"
#include "math.h"
//DigitalOut CLK(p24); // clock is at p24
//DigitalOut CLR(p25); // clear is at p25
//DigitalOut DATA(p30); // data is at p30

//row scanning
DigitalIn R1(p14); // R1C1 IS 1, R1C2 IS 2, R1C3 IS 3, R1C4 IS A
DigitalIn R2(p13); // R2C1 IS 4, R2C2 IS 5, R2C3 IS 6, R2C4 IS B 
DigitalIn R3(p12); // R3C1 IS 7, R3C2 IS 8, R3C3 IS 9, R3C4 IS C
DigitalIn R4(p11); // R4C1 IS 0, R4C2 IS F, R4C3 IS E, R4C4 IS D

DigitalOut C1(p8); 
DigitalOut C2(p7); 
DigitalOut C3(p6); 
DigitalOut C4(p5);


DigitalOut LED(p37);


//for part lab 6 a
int rowScan(int colNum);
int rowPressed();
int getNum(int rowNum, int colNum);


// for part lab 6 b
int getOpNum();

// for lab 8

#define decode_bcd(x) ((x >> 4) * 10 + (x & 0x0F))
#define encode_bcd(x) ((((x / 10) & 0x0F) << 4) + (x % 10))

//project
static unsigned char wr_lcd_mode(char c, char mode);
unsigned char lcd_command(char c);
unsigned char lcd_data(char c);
void lcd_init(void);
void lcd_backlight(char on);
void setTime (int type);
void displayAlphabet();
int getFromPad(int len);
int getOneChar();
int getOpNum();
int rowPressed();
int rowScan(int colNum);
int normalMode();
int calcMode();
void fillArr(char word[], char ch, int size, int choice);
void clearArr();
int getSize(int result);
void setUp();
void lcdPrev(char a[], char c, int size, int select);

static char line[20];
static int arrcursor = 0;
static int prevCursor = 0;

// LCD Commands
// -------------------------------------------------------------------------
#define LCD_CLEARDISPLAY 0x01
#define LCD_RETURNHOME 0x02
#define LCD_ENTRYMODESET 0x04
#define LCD_DISPLAYCONTROL 0x08
#define LCD_CURSORSHIFT 0x10
#define LCD_FUNCTIONSET 0x20
#define LCD_SETCGRAMADDR 0x40
#define LCD_SETDDRAMADDR 0x80
// flags for display entry mode
// -------------------------------------------------------------------------
#define LCD_ENTRYRIGHT 0x00
#define LCD_ENTRYLEFT 0x02
#define LCD_ENTRYSHIFTINCREMENT 0x01
#define LCD_ENTRYSHIFTDECREMENT 0x00
// flags for display on/off and cursor control
// -------------------------------------------------------------------------
#define LCD_DISPLAYON 0x04
#define LCD_DISPLAYOFF 0x00
#define LCD_CURSORON 0x02
#define LCD_CURSOROFF 0x00
#define LCD_BLINKON 0x01
#define LCD_BLINKOFF 0x00
// flags for display/cursor shift
// -------------------------------------------------------------------------
#define LCD_DISPLAYMOVE 0x08
#define LCD_CURSORMOVE 0x00
#define LCD_MOVERIGHT 0x04
#define LCD_MOVELEFT 0x00
// flags for function set
// -------------------------------------------------------------------------
#define LCD_8BITMODE 0x10
#define LCD_4BITMODE 0x00
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00
///*********************************************
//Project : I2C to LCD Interface-Routine
//Port PCF8574 : 7 6 5 4 3 2 1 0
// D7 D6 D5 D4 BL EN RW RS
//**********************************************/
#define PCF8574T 0x27

I2C i2c(p32, p31);// SDA, SCL//

void lcdLoad(char l[], char c, int size, int line, int position, int select){
int location;
switch(line){
case 0: location = 0; break;
case 1: location = 40; break;
case 2: location = 20; break;
case 3: location = 60; break;
}
for(int i = 0; i < location; i++){
lcd_command(0x14); //wtf is 0x14
}
for(int j = 0; j < position; j++){
lcd_command(0x14);
location++;
}
if(select == 0){
for(int i = 0; i < size - 1; i++){
location++;
lcd_data(l[i]);
}
}
else{
location++;
lcd_data(c);
}
prevCursor = location;
while (location != 0){
location--;
lcd_command(0x10); //wy 0x10
}
}
void lcdPrev(char a[], char c, int size, int select){
    int location = prevCursor;
    for(int i = 0; i < location; i++){
        lcd_command(0x14);
    }

    if(select == 0){
        for(int i = 0; i < size-1; i++){
            location++;
            lcd_data(a[i]);
        }
    }else{
            location++;
            lcd_data(c);
    }

    prevCursor = location;

    while(location !=0){
            location--;
            lcd_command(0x10);
    }
}
static unsigned char wr_lcd_mode(char c, char mode) {
 char ret = 1;
 char seq[5];
 static char backlight = 8;
 if (mode == 8) {
 backlight = (c != 0) ? 8 : 0;
 return 0;
 }
 mode |= backlight;
 seq[0] = mode; // EN=0, RW=0, RS=mode
 seq[1] = (c & 0xF0) | mode | 4; // EN=1, RW=0, RS=1
 seq[2] = seq[1] & ~4; // EN=0, RW=0, RS=1
 seq[3] = (c << 4) | mode | 4; // EN=1, RW=0, RS=1
 seq[4] = seq[3] & ~4; // EN=0, RW=0, RS=1
 i2c.start();
 i2c.write(PCF8574T << 1);
 uint8_t i;
 for (i = 0; i < 5; i++) {
 i2c.write(seq[i]);
 wait(0.002);
 }
 ret = 0;
 i2c.stop();
 if (!(mode & 1) && c <= 2)
 wait(0.2); // CLS and HOME
 return ret;
}
unsigned char lcd_command(char c) {
 wr_lcd_mode(c, 0);
}
unsigned char lcd_data(char c) {
 wr_lcd_mode(c, 1);
}
void lcd_init(void) {
 char i;

 // High-Nibble von Byte 8 = Display Control:
 // 1DCB**** D: Disp on/off; C: Cursor on/off B: blink on/off
 char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
 wait(1); // Delay power-up
 for (i = 0; i < sizeof(init_sequenz); i++) {
 lcd_command(init_sequenz[i]);
 }
}
void lcd_backlight(char on) {
 wr_lcd_mode(on, 8);
}


void fillArr(char word[], char ch, int size, int choice){
if(choice == 0){
for(int i = 0; i < size - 1; i++){
line[arrcursor] = word[i];
arrcursor++;
}
}
else{
line[arrcursor] = ch;
arrcursor++;
}
}

void clearArr(){
sprintf(line, "%d", 0);
arrcursor = 0;
}


int main() {
lcd_init();
// setting the columns high (for row scanning
C1 = 1;
C2 = 1;
C3 = 1;
C4 = 1;
lcdLoad(“Ishan Pathak", ' ', sizeof(“Ishan Pathak"),0,0,0);
wait(2);
displayAlphabet();
setUp();

}

void setUp(){
int calcModeToggel = 0;
//start the real time clock
i2c.start(); /* The following Enables the Oscillator */
i2c.write(0xD0); /* address the part to write */
i2c.write(0x00); /* position the address pointer to 0 */
i2c.write(0x00); /* write 0 to the secs register, clear the CH bit */
i2c.stop();
//init the fucking temp sensosr
i2c.start();
i2c.write(0x90);
i2c.write(0xac);
i2c.write(2);
i2c.stop();
setTime(0);
setTime(1);
while(1){
if(calcModeToggel == 0){
lcd_command(0x01);
prevCursor = 0;
calcModeToggel = normalMode();
}
else if(calcModeToggel == 1){
lcd_command(0x01);
prevCursor = 0;
calcModeToggel = calcMode();
}
}
}

void displayAlphabet(){
lcd_command(0x01);
lcdLoad("ABCDEFGHIJKLM", ' ', sizeof("ABCDEFGHIJKLM"), 0, 0, 0);
lcdLoad("NOPQRSTUVWXYZ", ' ', sizeof("ABCDEFGHIJKLM"), 1, 0, 0);
wait(1);
lcd_command(0x01);
lcdLoad("ABCDEFGHIJKLM", ' ', sizeof("ABCDEFGHIJKLM"), 0, 0, 0);
lcdLoad("NOPQRSTUVWXYZ", ' ', sizeof("ABCDEFGHIJKLM"), 1, 0, 0);
lcdLoad("abcdefghijklm", ' ', sizeof("ABCDEFGHIJKLM"), 2, 0, 0);
lcdLoad("nopqrstuvwxyz", ' ', sizeof("ABCDEFGHIJKLM"), 3, 0, 0);
wait(1);
lcd_command(0x01);
lcdLoad("0123456789.", ' ', sizeof("0123456789."), 0, 0, 0);
lcdLoad(".9876543210", ' ', sizeof("0123456789."), 1, 0, 0);
wait(1);
lcd_command(0x01);
prevCursor = 0;
}

void setTime (int type){
int hour, min, ampm, month, date, day, year;
if(type ==0){
lcdLoad("Set clock time", ' ', sizeof("Set clock time"),0,0,0);
wait(1);
lcd_command(0x01);
do{
//getting clock time and hour
lcdLoad("Enter hour 01-12", ' ', sizeof("Enter hour 01-12"), 0, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 2, 0, 0);
hour = getFromPad(2);
lcd_command(0x01);
}while(hour > 12 || hour < 1);

do{
//getting clock time and minuite
lcdLoad("Enter minute 00-59", ' ', sizeof("Enter minute 00-59"), 0, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 2, 0, 0);
min = getFromPad(2);
lcd_command(0x01);}
while(min > 59);

do{
//getting the time am or pm
lcdLoad("Clock am(A) or pm(B)", ' ',sizeof("Clock am(A) or pm(B)"),0,0,0);
lcdLoad(" ", ' ', sizeof(" "), 2, 0, 0);
ampm = getOneChar();
lcd_command(0x01);
}while (ampm!=10 && ampm != 11);

do{
//getting the month form the user
lcdLoad("Month eg. 11 for Nov", ' ', sizeof("Month eg. 11 for Nov"), 0, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 2, 0, 0);
month = getFromPad(2);
lcd_command(0x01);
}while(month > 12 || month < 1);
do{
//getting ht edate from the user
lcdLoad("clock time date? ", ' ', sizeof("clock time date? "), 0, 0, 0);
lcdLoad("(day of the month to 31)", ' ', sizeof("(day of the month to 31)"), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
date = getFromPad(2);
lcd_command(0x01);
}while(date > 31 || date < 1);
do{
//getting the day from the user
lcdLoad("clock time day?", ' ', sizeof("clock time day?"), 0, 0, 0);
lcdLoad("(day of the week 1 to 7) ", ' ', sizeof("(day of the week 1 to 7) "), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
day = getFromPad(1);
lcd_command(0x01);
}while(day > 7 || day < 1);
do{
//getting the year from the user
lcdLoad("clock time year?", ' ', sizeof("clock time year?"), 0, 0, 0);
lcdLoad("(enter the year)", ' ', sizeof("(enter the year)"), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
year = getFromPad(4);
lcd_command(0x01);
}while(year < 4000 || year > 4099);
// defineing the ampm declesec
if(ampm == 10){
ampm = 0x40;
}
else if(ampm == 11){
ampm = 0x60;
}
//write to the screne theriugh i2c
// entering the clock data
i2c.start();
i2c.write(0xD0);
i2c.write(0x00); // write register address 1st clock register
i2c.write(encode_bcd(0)); // start at 0 seconds
i2c.write(encode_bcd(min)); // the 57th minute
i2c.write( ampm | encode_bcd(hour)); // the 11th hour pm
i2c.write(encode_bcd(day)); // the 6th day of week (friday)
i2c.write(encode_bcd(date)); // the 28th day of month
i2c.write(encode_bcd(month)); // the 2nd month of the year (February) (Century bit 0)
i2c.write(encode_bcd(year % 2000)); // the year is 2000 + 20 (a leap year)
i2c.start();
i2c.write(0xD0);
i2c.write(0x0e); // write register address control register
i2c.write(0x20); // enable osc, bbsqi
i2c.write(0); // clear the osf, alarm flags
i2c.stop();
}
else {
//sett the alarm
lcdLoad("setting alarm 1 time", ' ', sizeof("setting alarm 1 time"), 2, 0, 0);
wait(5);
lcd_command(0x01);
do{
//printf("alarm 1 time hour? ");
lcdLoad("alarm time hour?", ' ', sizeof("alarm time hour?"), 0, 0, 0);
lcdLoad("enter hour 04, 12", ' ', sizeof("enter hour 04, 12"), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
hour = getFromPad(2);
lcd_command(0x01);
}while (hour >12 || hour <1);
do{
//printf("alarm 1 time min? ");
lcdLoad("alarm time min? ", ' ', sizeof("alarm time min? "), 0, 0, 0);
lcdLoad("(33 and e) ", ' ', sizeof("(33 and e) "), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
min = getFromPad(2);
lcd_command(0x01);
}while(min > 59);
do{
//printf("alarm1 time am or pm? ");
lcdLoad("alarm am or pm? ", ' ',sizeof("alarm am or pm? "),0,0,0);
lcdLoad("(a for am b for pm)", ' ',sizeof("(a for am b for pm)"),1,0,0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
ampm = getOneChar();
lcd_command(0x01);
}while(ampm != 10 && ampm != 11);
do{
//printf("alarm 1 time month? ");
lcdLoad("alarm time month? ", ' ', sizeof("alarm time month? "), 0, 0, 0);
lcdLoad("(8 for august) ", ' ', sizeof("(8 for august) "), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
month = getFromPad(2);
lcd_command(0x01);
}while(month > 12 || month < 1);
do{
//printf("alarm 1 time date? ");
lcdLoad("alarm time date? ", ' ', sizeof("alarm time date? "), 0, 0, 0);
lcdLoad("(day of the month to 31)", ' ', sizeof("(day of the month to 31)"), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
date = getFromPad(2);
lcd_command(0x01);
}while(date > 31 || date < 1);
do{
//printf("alarm 1 time day? ");
lcdLoad("alarm time day?", ' ', sizeof("alarm time day?"), 0, 0, 0);
lcdLoad("(day of the week 1 to 7) ", ' ', sizeof("(day of the week 1 to 7) "), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
day = getFromPad(1);
lcd_command(0x01);
}while(day > 7 || day < 1);
do{
//printf("alarm 1 time year? ");
lcdLoad("alarm time year?", ' ', sizeof("alarm time year?"), 0, 0, 0);
lcdLoad("(enter the year)", ' ', sizeof("(enter the year)"), 1, 0, 0);
lcdLoad(" ", ' ', sizeof(" "), 3, 0, 0);
year = getFromPad(4);
lcd_command(0x01);
}while(year < 4000 || year > 4099);
if(ampm == 10){
ampm = 0x40;
}
else if(ampm == 11){
ampm = 0x60;
}
// writing the alarm data
i2c.start();
i2c.write(0xD0);
i2c.write(0x07); // write register address 1st clock register
i2c.write(encode_bcd(0)); // start at 0 seconds
i2c.write(encode_bcd(min)); // the 57th minute
i2c.write( ampm | encode_bcd(hour)); // the 11th hour pm
i2c.write(0x00 | encode_bcd(date)); // the 28th day of month
i2c.start();
i2c.write(0xD0);
i2c.write(0x0e); // write register address control register
i2c.write(0x20); // enable osc, bbsqi
i2c.write(0); // clear the osf, alarm flags
i2c.stop();
}
}
static int alarmFired = 0;
int normalMode(){
int sec, min, hrs, day, date,mon, year;
int aMin, aHrs, aDate, aampm;
int ampm;
int alarmFlag = 0;
//read the values
i2c.start(); // start i2c
i2c.write(0xD0); // the address of the slave
i2c.write(0x00); // the starting address to read (will increment automatically after each ACK)
i2c.start(); // repeated i2c start
i2c.write(0xD1); // we want to read from the slave
sec = i2c.read(1); // read the seconds register, send ACK
min = i2c.read(1); // read the minutes register, send ACK
hrs = i2c.read(1); // read the hour register, send ACK
day = i2c.read(1); // read the day register, send ACK
date = i2c.read(1); // read the Date register, send ACK
mon = i2c.read(1); // read the month register, send ACK
year = i2c.read(0); // read the year register, send NACK to end the communication
i2c.stop(); // stop the i2c
i2c.start(); // start i2c
i2c.write(0xD0); // the address of the slave
i2c.write(0x08); // the starting address to read (will increment automatically after each ACK)
i2c.start(); // repeated i2c start
i2c.write(0xD1); // we want to read from the slave
aMin = i2c.read(1); // read the minutes register, send ACK
aHrs = i2c.read(1); // read the hour register, send ACK
aDate = i2c.read(0); // read the Date register, send NACK
i2c.stop(); // stop the i2c
i2c.start(); // start i2c
i2c.write(0xD0); // the address of the slave
i2c.write(0x0f); // the starting address to read (will increment automatically after each ACK)
i2c.start(); // repeated i2c start
i2c.write(0xD1); // we want to read from the slave
alarmFlag = i2c.read(0); // read the alarm flag register, send NACK
i2c.stop(); // stop the i2c
alarmFlag = alarmFlag & 0x01; // bit 0 is the alarm flag
if (alarmFired == 0){
alarmFired = alarmFlag;
}
// set the date valuse
ampm = (hrs & 0x20) >> 5; // get the ampm bit
sec = decode_bcd(sec);
min = decode_bcd(min);
hrs = decode_bcd((hrs & 0x1F));
day = decode_bcd(day);
date = decode_bcd(date);
mon = decode_bcd(mon);
year = decode_bcd(year);
aampm = (aHrs & 0x20) >> 5;
aMin = decode_bcd(aMin);
aHrs = decode_bcd((aHrs & 0x1F));
aDate = decode_bcd(aDate);
int temperature;
int upperByte;
int lowerByte;
i2c.start();
i2c.write(0x90);
i2c.write(0x51);
i2c.stop();
i2c.start();
i2c.write(0x90);
i2c.write(0xaa);

i2c.start();
i2c.write(0x91);
upperByte = i2c.read(1); // send an ACK after read
lowerByte = i2c.read(0); // send a NACK after read
temperature = (upperByte << 8) + lowerByte;
i2c.stop();
//tempature values dawg
float tempF;
float tempC;
tempC = temperature >> 4;
if (tempC > 0x7FF){ // if negative
tempC = -1 * ( ((int) (2 << 12) - tempC) * 0.0625) ; // 2s comp convert
}else{
tempC = tempC * 0.0625;
}
tempF = (tempC * 1.8) + 32;
if (alarmFlag == 1){
lcdLoad("Alarm 1 has expired", ' ', sizeof("Alarm 1 has expired"), 0,0,0);
LED = 1;
}
char tmp[3];
int tsize = sizeof(tmp);
sprintf(tmp, "%d", hrs);
if(hrs < 10){
fillArr(tmp, '0', tsize, 1);
fillArr(tmp, ' ', tsize-1, 0);
}
else{
fillArr(tmp, ' ', tsize, 0);
}
fillArr(" ", ':', 1, 1);
sprintf(tmp, "%d", min);
if(min < 10){
fillArr(tmp, '0', tsize, 1);
fillArr(tmp, ' ', tsize-1, 0);
}
else{
fillArr(tmp, ' ', tsize, 0);
}
if(ampm == 1){
fillArr("pm ", ' ', sizeof("pm "), 0);
}
else{
fillArr("am ", ' ', sizeof("am "), 0);
}
switch(mon){
case 1: fillArr("Jan ", ' ', sizeof("Jan "), 0);break;
case 2: fillArr("Feb ", ' ', sizeof("Feb "), 0);break;
case 3: fillArr("Mar ", ' ', sizeof("Mar "), 0);break;
case 4: fillArr("Apr ", ' ', sizeof("Apr "), 0);break;
case 5: fillArr("May ", ' ', sizeof("May "), 0);break;
case 6: fillArr("Jun ", ' ', sizeof("Jun "), 0);break;
case 7: fillArr("Jul ", ' ', sizeof("Jul "), 0);break;
case 8: fillArr("Aug ", ' ', sizeof("Aug "), 0);break;
case 9: fillArr("Sep ", ' ', sizeof("Sep "), 0);break;
case 10: fillArr("Oct ", ' ', sizeof("Oct "), 0);break;
case 11: fillArr("Nov ", ' ', sizeof("Nov "), 0);break;
case 12: fillArr("Dec ", ' ', sizeof("Dec "), 0);break;
}
sprintf(tmp, "%d", date);
if(date < 10){
fillArr(tmp, '0', tsize, 1);
fillArr(tmp, ' ', tsize-1, 0);
}
else{
fillArr(tmp, ' ', tsize, 0);
}
fillArr(", ", ' ', sizeof(", "), 0);
char yrs[5];
sprintf(yrs, "%d", 2000+year);
int ysize = sizeof(yrs);
fillArr(yrs, ' ', ysize, 0);
lcdLoad(line, ' ', sizeof(line) + 1, 1, 0, 0);
if (alarmFlag == 1){
LED = 0;
}
clearArr();
char tc[5];
int size = sizeof(tc);
sprintf(tc, "%f", tempC);
char tf[5];
sprintf(tf, "%f", tempF);
fillArr("Temp: ", ' ', sizeof("Temp: "), 0);
fillArr(tc, ' ', size, 0);
fillArr(" ",0xDF, 1, 1);
fillArr(" ",'C', 1, 1);
fillArr(" ",'(', 1, 1);
fillArr(tf, ' ', size, 0);
fillArr(" ",0xDF, 1, 1);
fillArr(" ",'F', 1, 1);
fillArr(" ",')', 1, 1);
lcdLoad(line, ' ', sizeof(line) + 1, 2, 0, 0);
if (alarmFlag == 1){
LED = 1;
wait(0.5);
LED = 0;
}
clearArr();
int chr;
int colNum =1;
float counter = 0;

while(counter < 1.25){
chr = rowScan(colNum);
if(chr != 0){
chr = getNum(chr, colNum);
if(chr == 15){
if(alarmFlag == 1){
i2c.start();
i2c.write(0xD0);
i2c.write(0x0f);
i2c.write(0x00);
i2c.stop();
return 0;
}
return 1;
}
else if(chr == 14 && alarmFired == 0){
//display the alerm settings
...
